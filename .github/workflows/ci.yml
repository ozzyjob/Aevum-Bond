name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    CARGO_TERM_COLOR: always
    RUST_BACKTRACE: 1

jobs:
    format:
        name: Format Check
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt

            - name: Check formatting
              run: cargo fmt --all -- --check

    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: clippy

            - name: Cache cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Run clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

    test:
        name: Test Suite
        runs-on: ubuntu-latest
        strategy:
            matrix:
                rust: [stable, beta]
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: ${{ matrix.rust }}

            - name: Cache cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y build-essential pkg-config libssl-dev

            - name: Run unit tests
              run: cargo test --lib --all

            - name: Run integration tests
              run: cargo test --test '*' --all

            - name: Run doc tests
              run: cargo test --doc --all

    coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Install tarpaulin
              run: cargo install cargo-tarpaulin

            - name: Cache cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

            - name: Generate coverage report
              run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

            - name: Upload to codecov.io
              uses: codecov/codecov-action@v4
              with:
                  file: cobertura.xml
                  fail_ci_if_error: false

    security:
        name: Security Audit
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Install cargo-audit
              run: cargo install cargo-audit

            - name: Run security audit
              run: cargo audit

            - name: Run cargo deny
              uses: EmbarkStudios/cargo-deny-action@v1

    build:
        name: Build
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                rust: [stable]
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: ${{ matrix.rust }}

            - name: Cache cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Install system dependencies (Ubuntu)
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y build-essential pkg-config libssl-dev

            - name: Build debug
              run: cargo build --all

            - name: Build release
              run: cargo build --all --release

    benchmark:
        name: Performance Benchmarks
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

            - name: Run benchmarks
              run: cargo bench --all

            - name: Store benchmark results
              uses: benchmark-action/github-action-benchmark@v1
              with:
                  tool: "cargo"
                  output-file-path: target/criterion/report/index.html
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  auto-push: true

    docs:
        name: Documentation
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

            - name: Build documentation
              run: cargo doc --no-deps --all-features

            - name: Deploy to GitHub Pages
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: ./target/doc

    docker:
        name: Docker Build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: |
                      ghcr.io/${{ github.repository_owner }}/aevum-bond:latest
                      ghcr.io/${{ github.repository_owner }}/aevum-bond:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
