version: "3.8"

services:
  # Main Aevum & Bond node
  aevum-bond-node:
    build: .
    container_name: aevum-bond-node
    restart: unless-stopped
    ports:
      - "8080:8080" # Bond Chain RPC
      - "8081:8081" # Aevum Chain RPC
      - "30303:30303" # P2P Network
    volumes:
      - node_data:/app/data
      - node_config:/app/config
      - node_logs:/app/logs
    environment:
      - RUST_LOG=info
      - BOND_PORT=8080
      - AEVUM_PORT=8081
      - P2P_PORT=30303
      - ENABLE_MINING=true
      - ENABLE_VALIDATION=true
    networks:
      - aevum-bond-network
    healthcheck:
      test: ["CMD", "aevum-bond", "node", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Bond chain miner (can be scaled)
  bond-miner:
    build: .
    command: ["aevum-bond", "mining", "start", "--threads", "2"]
    restart: unless-stopped
    depends_on:
      aevum-bond-node:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - NODE_URL=http://aevum-bond-node:8080
      - MINING_THREADS=2
      - MINING_DIFFICULTY=1000
    networks:
      - aevum-bond-network
    deploy:
      replicas: 2

  # Aevum chain validator (can be scaled)
  aevum-validator:
    build: .
    command: ["aevum-bond", "validator", "start", "--stake", "1000"]
    restart: unless-stopped
    depends_on:
      aevum-bond-node:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - NODE_URL=http://aevum-bond-node:8081
      - VALIDATOR_STAKE=1000
      - COMMISSION_RATE=5
    networks:
      - aevum-bond-network
    deploy:
      replicas: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - aevum-bond-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - aevum-bond-network

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - aevum-bond-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - node_logs:/var/log/aevum-bond:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - aevum-bond-network

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - aevum-bond-network

  # PostgreSQL for analytics and reporting
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      - POSTGRES_DB=aevum_bond
      - POSTGRES_USER=aevum
      - POSTGRES_PASSWORD=bond123
    networks:
      - aevum-bond-network

  # Load balancer (Nginx)
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - aevum-bond-node
    networks:
      - aevum-bond-network

  # Development tools container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: dev-tools
    volumes:
      - .:/workspace
      - cargo_cache:/usr/local/cargo
    working_dir: /workspace
    command: tail -f /dev/null
    networks:
      - aevum-bond-network
    profiles:
      - development

networks:
  aevum-bond-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  node_data:
    driver: local
  node_config:
    driver: local
  node_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  cargo_cache:
    driver: local
